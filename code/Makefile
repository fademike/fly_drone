##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.3.0-B58] date: [Sun Dec 08 21:00:56 MSK 2024] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = fly_drone
TARGET_BL = bl


######################################
# building variables
######################################
# debug build?
DEBUG = 0
# optimization
OPT = -Os
# OPT += -g3 -DDEBUG


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_i2c.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_iwdg.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_spi.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c \
Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
Middlewares/Third_Party/FreeRTOS/Source/event_groups.c \
Middlewares/Third_Party/FreeRTOS/Source/list.c \
Middlewares/Third_Party/FreeRTOS/Source/queue.c \
Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c \
Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
Middlewares/Third_Party/FreeRTOS/Source/timers.c \
Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c \
Core/Src/main.c \
Core/Src/freertos.c \
Core/Src/stm32f1xx_it.c \
Core/Src/stm32f1xx_hal_msp.c \
Core/Src/system_stm32f1xx.c \
Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_1.c \
Core/Src/sysmem.c \
Core/Src/syscalls.c \
Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c \
Core/Src/stm32f1xx_hal_timebase_tim.c


C_SOURCES += $(foreach dir,Drivers/modem,$(wildcard $(dir)/*.c)) 

DELETE_C_FOR_BL = Core/Src/main.c \
					Core/Src/system_stm32f1xx.c \
					Middlewares/Third_Party/FreeRTOS/Source/croutine.c \
					Middlewares/Third_Party/FreeRTOS/Source/event_groups.c \
					Middlewares/Third_Party/FreeRTOS/Source/list.c \
					Middlewares/Third_Party/FreeRTOS/Source/queue.c \
					Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c \
					Middlewares/Third_Party/FreeRTOS/Source/tasks.c \
					Middlewares/Third_Party/FreeRTOS/Source/timers.c \
					Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/port.c \
					Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_1.c \
					Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c

BL_C_SOURCES := $(filter-out ${DELETE_C_FOR_BL},$(C_SOURCES))
BL_C_SOURCES += bootloader/main_bl.c bootloader/system_stm32f1xx_bl.c 

BL_C_SOURCES += Core/Src/spi.c

DELETE_C_FOR_DEBUG = Core/Src/system_stm32f1xx.c 
ifeq ($(DEBUG), 1)
# set VECT_TAB_OFFSET suck as bootloader startup:
C_SOURCES := $(filter-out ${DELETE_C_FOR_DEBUG},$(C_SOURCES))
C_SOURCES += bootloader/system_stm32f1xx_bl.c 
endif

C_SOURCES += Core/Src/spi.c \
				Core/Src/params.c \
				Core/Src/MotorControl.c \
				Core/Src/mavlink_handler.c \
				Core/Src/system.c

C_SOURCES += $(foreach dir,Drivers/imu,$(wildcard $(dir)/*.c)) 

# ASM sources
ASM_SOURCES =  \
startup_stm32f103xb.s

# ASM sources
ASMM_SOURCES = 




#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F103xB


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-ICore/Inc \
-IDrivers/STM32F1xx_HAL_Driver/Inc \
-IDrivers/STM32F1xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F1xx/Include \
-IDrivers/CMSIS/Include \
-IMiddlewares/Third_Party/FreeRTOS/Source/include \
-IMiddlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3 \
-IMiddlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2



C_INCLUDES += -IDrivers/modem
C_INCLUDES += -IDrivers/imu
C_INCLUDES += -IDrivers/mavlink/common

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall  -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2 -DDEBUG
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = bootloader/DEBUG.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs $(LIBDIR) $(LIBS) -Wl,--gc-sections

# default action: build all
all: bl main

ifeq ($(DEBUG), 0)
LDSCRIPT = STM32F103C8Tx_FLASH.ld
endif

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.o)))
vpath %.S $(sort $(dir $(ASMM_SOURCES)))


OBJECTS_BL = $(addprefix $(BUILD_DIR)/,$(notdir $(BL_C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(BL_C_SOURCES)))
# list of ASM program objects
OBJECTS_BL += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
# OBJECTS_BL += $(addprefix $(BUILD_DIR)/,$(notdir $(ASMM_SOURCES:.S=.o)))
# vpath %.S $(sort $(dir $(ASMM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@
$(BUILD_DIR)/%.o: %.S Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR)/$(TARGET_BL).bin: $(BUILD_DIR)/$(TARGET_BL).elf | $(BUILD_DIR)
	$(BIN) $< $@	
$(BUILD_DIR):
	mkdir -p $@		

$(BUILD_DIR)/$(TARGET_BL).elf: $(OBJECTS_BL) Makefile
	$(CC) $(OBJECTS_BL) $(LDFLAGS) -Tbootloader/BOOTLOADER.ld -Wl,-Map=$(BUILD_DIR)/$(TARGET_BL).map,--cref -o $@
	$(SZ) $@

$(BUILD_DIR)/key.bin: Makefile
	@/usr/bin/printf '\x55\x55\xAA\xAA' > $@

# bl - build bootloader
bl: $(BUILD_DIR)/$(TARGET_BL).bin
	@echo $@ finish
# lbl - load bootloader
lbl:  $(BUILD_DIR)/$(TARGET_BL).bin
	~/Programs/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin/STM32_Programmer_CLI -c port=swd -w  $< 0x08000000 --verify -rst
	
# build main program
main: $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/key.bin
	
# create a key to mark that the main program is loaded into flash
key: $(BUILD_DIR)/key.bin
	
# load main program
lmain:  $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/key.bin
	@echo load
	~/Programs/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin/STM32_Programmer_CLI -c port=swd -w $(BUILD_DIR)/key.bin 0x08002C00 --verify
	~/Programs/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin/STM32_Programmer_CLI -c port=swd -w  $< 0x08003000 --verify -rst

# load all	
load: lbl lmain

# load main program for debug
debug: $(BUILD_DIR)/$(TARGET).bin
	@echo debug
	~/Programs/STMicroelectronics/STM32Cube/STM32CubeProgrammer/bin/STM32_Programmer_CLI -c port=swd -w  $< 0x08000000 --verify -rst
	
#######################################
# clean up
#######################################
clean:
	-rm -fR ./build/*
	-rm -fR ./build/

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
